/*
This csp PAT file is responsible for generating a moveset which will achieve a goal
based on the delivery bot's current interpretation of its environment. It expects world.csp
to be updated with the bot's current understanding of obstacles, order pickups, and
visited squares.

It defines two types of moves for every direction (up, left, right, down). These
are visited/unvisited variants, respectively intending to prioritise visiting
already visited locations or unvisited locations. When moving to a new location,
the location is marked as visited. If that location was an order pickup, it is
"picked up" by setting onBoard to 1.

The bot's position is maintained by xpos and ypos.

It also defines three core goals. These are:
home:
This goal simply attempts to bring the bot back to its home position, as given
by BOT_HOME_X and BOT_HOME_Y provided in world.csp.

goalAreaChecked:
This goal attempts to mark all locations as visited, and to return to the home position
during the process.

noOrders:
This goal ensures that all locations are void of order pickups if the bot is not carrying one (onBoard == 0).
If the bot is carrying an order, it must return home to deliver it.
*/

#include "world.csp";

#define MoveUpCond (xpos != 0) && (world[xpos-1][ypos] != Obstacle) && (onBoard == 0 || world[xpos-1][ypos] != OrderPickup);
#define MoveUpCondVisited (world[xpos-1][ypos] == Visited);
#define MoveUpCondNotVisited (world[xpos-1][ypos] != Visited);
MoveUpIfVisited() = [MoveUpCond && MoveUpCondVisited] moveUp{xpos = xpos - 1; if(world[xpos][ypos] == OrderPickup) {onBoard = 1;}; world[xpos][ypos] = Visited; } -> Skip;
MoveUpIfNotVisited() = [MoveUpCond && MoveUpCondNotVisited] moveUp{xpos = xpos - 1; if(world[xpos][ypos] == OrderPickup) {onBoard = 1;}; world[xpos][ypos] = Visited;} -> Skip;

#define MoveDownCond (xpos != Rows - 1) && (world[xpos+1][ypos] != Obstacle) && (onBoard == 0 || world[xpos+1][ypos] != OrderPickup);
#define MoveDownCondVisited (world[xpos+1][ypos] == Visited);
#define MoveDownCondNotVisited (world[xpos+1][ypos] != Visited);
MoveDownIfVisited() = [MoveDownCond && MoveDownCondVisited] moveDown{xpos = xpos + 1; if(world[xpos][ypos] == OrderPickup) {onBoard = 1;}; world[xpos][ypos] = Visited;} -> Skip;
MoveDownIfNotVisited() = [MoveDownCond && MoveDownCondNotVisited] moveDown{xpos = xpos + 1; if(world[xpos][ypos] == OrderPickup) {onBoard = 1;}; world[xpos][ypos] = Visited;} -> Skip;

#define MoveLeftCond (ypos != 0) && (world[xpos][ypos-1] != Obstacle) && (onBoard == 0 || world[xpos][ypos-1] != OrderPickup);
#define MoveLeftCondVisited (world[xpos][ypos-1] == Visited);
#define MoveLeftCondNotVisited (world[xpos][ypos-1] != Visited);
MoveLeftIfVisited() = [MoveLeftCond && MoveLeftCondVisited] moveLeft{ypos = ypos - 1; if(world[xpos][ypos] == OrderPickup) {onBoard = 1;};world[xpos][ypos] = Visited;} -> Skip;
MoveLeftIfNotVisited() = [MoveLeftCond && MoveLeftCondNotVisited] moveLeft{ypos = ypos - 1; if(world[xpos][ypos] == OrderPickup) {onBoard = 1;}; world[xpos][ypos] = Visited;} -> Skip;

#define MoveRightCond (ypos != Cols - 1) && (world[xpos][ypos+1] != Obstacle) && (onBoard == 0 || world[xpos][ypos+1] != OrderPickup);
#define MoveRightCondVisited (world[xpos][ypos+1] == Visited);
#define MoveRightCondNotVisited (world[xpos][ypos+1] != Visited);
MoveRightIfVisited() = [MoveRightCond && MoveRightCondVisited] moveRight{ypos = ypos + 1; if(world[xpos][ypos] == OrderPickup) {onBoard = 1;}; world[xpos][ypos] = Visited;} -> Skip;
MoveRightIfNotVisited() = [MoveRightCond && MoveRightCondNotVisited] moveRight{ypos = ypos + 1; if(world[xpos][ypos] == OrderPickup) {onBoard = 1;}; world[xpos][ypos] = Visited;} -> Skip;

MoveIfNotVisited() = MoveUpIfNotVisited() [] MoveDownIfNotVisited() [] MoveLeftIfNotVisited() [] MoveRightIfNotVisited();
MoveIfVisited() = MoveUpIfVisited() [] MoveDownIfVisited() [] MoveLeftIfVisited() [] MoveRightIfVisited();
UnvisitedMove() = (MoveIfVisited() [] MoveIfNotVisited());UnvisitedMove();
VisitedMove() = (MoveIfNotVisited() [] MoveIfVisited());VisitedMove();

#define home (xpos == BOT_HOME_X && ypos == BOT_HOME_Y);
#define goalAreaChecked (&& i:{0..Rows-1}@(&& j:{0..Cols-1}@(world[i][j] == Visited || world[i][j] == Obstacle)) && home);
#define noOrders ((&& i:{0..Rows-1}@(&& j:{0..Cols-1}@(world[i][j] != OrderPickup)) && (onBoard == 0 || home)) || (onBoard == 1 && home));